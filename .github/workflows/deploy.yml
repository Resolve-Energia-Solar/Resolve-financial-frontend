name: CI/CD Pipeline for resolve-erp-frontend

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: "resourceresolve.azurecr.io/resolve-erp-frontend"
  AKS_CLUSTER_NAME: "Resolve-AKS-Web"
  AKS_RESOURCE_GROUP: "Resolve"
  NAMESPACE: "resolve-frontend-erp"
  DEPLOYMENT_NAME: "resolve-erp-frontend"

jobs:
  build-and-deploy:
    runs-on: ubuntu-20.04
    environment: resolve

    steps:

      # 1. Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Log in no Azure Container Registry
      - name: Log in to Azure Container Registry
        run: echo "${{ vars.AZURE_ACR_PASSWORD }}" | docker login resourceresolve.azurecr.io -u "${{ vars.AZURE_ACR_USERNAME }}" --password-stdin

      # 4. Build e Push usando cache
      - name: Build and Push Docker Image with Cache
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          tags: |
            $DOCKER_IMAGE:${{ github.sha }}
          cache-from: type=registry,ref="$DOCKER_IMAGE:cache"
          cache-to: type=registry,mode=max,ref="$DOCKER_IMAGE:cache"
          push: true

      # 5. Login no Azure CLI
      - name: Log in to Azure CLI
        run: az login --service-principal -u "${{ vars.AZURE_CLIENT_ID }}" -p "${{ vars.AZURE_CLIENT_SECRET }}" --tenant "${{ vars.AZURE_TENANT_ID }}"

      # 6. Configurar Acesso ao Cluster AKS
      - name: Configure Access to AKS
        run: az aks get-credentials --resource-group "$AKS_RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing

      # 7. Deploy da aplicação no cluster AKS
      - name: Update Deployment on AKS
        run: |
          kubectl set image deployment/$DEPLOYMENT_NAME resolve-erp-frontend="$DOCKER_IMAGE:${{ github.sha }}" -n "$NAMESPACE"
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n "$NAMESPACE"
