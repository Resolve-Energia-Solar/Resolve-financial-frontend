name: CI/CD Pipeline for resolve-erp-frontend

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: "resourceresolve.azurecr.io/resolve-erp-frontend"
  AKS_CLUSTER_NAME: "Resolve-AKS-Web"
  AKS_RESOURCE_GROUP: "Resolve"
  NAMESPACE: "resolve-frontend-erp"
  DEPLOYMENT_NAME: "resolve-erp-frontend"

jobs:
  build-and-deploy:
    runs-on: ubuntu-20.04
    environment: resolve

    steps:
      # 1. Checkout do Código
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Carregar variáveis do .env
      - name: Create .env file
        run: |
          echo "GENERATE_SOURCEMAP=${{ vars.GENERATE_SOURCEMAP }}" >> .env
          echo "NEXT_PUBLIC_API_BASE_CLICKSIGN_TEMPLATE_ID=${{ vars.NEXT_PUBLIC_API_BASE_CLICKSIGN_TEMPLATE_ID }}" >> .env
          echo "NEXT_PUBLIC_API_BASE_CLICKSIGN_TEMPLATE_PRE_ID=${{ vars.NEXT_PUBLIC_API_BASE_CLICKSIGN_TEMPLATE_PRE_ID }}" >> .env
          echo "NEXT_PUBLIC_CLICKSIGN_TOKEN=${{ vars.NEXT_PUBLIC_CLICKSIGN_TOKEN }}" >> .env
          echo "NEXT_PUBLIC_API_BASE_CLICKSIGN_URL=${{ vars.NEXT_PUBLIC_API_BASE_CLICKSIGN_URL }}" >> .env
          echo "NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL }}" >> .env
          echo "NEXT_PUBLIC_CONTENT_TYPE_LEAD_ID=${{ vars.NEXT_PUBLIC_CONTENT_TYPE_LEAD_ID }}" >> .env
          echo "NEXT_PUBLIC_CONTENT_TYPE_PROJECT_ID=${{ vars.NEXT_PUBLIC_CONTENT_TYPE_PROJECT_ID }}" >> .env
          echo "NEXT_PUBLIC_SERVICE_INSPECTION_ID=${{ vars.NEXT_PUBLIC_SERVICE_INSPECTION_ID }}" >> .env
          echo "NEXT_PUBLIC_SUPABASE_KEY=${{ vars.NEXT_PUBLIC_SUPABASE_KEY }}" >> .env
          echo "NEXT_PUBLIC_CONTENT_TYPE_SALE_ID=${{ vars.NEXT_PUBLIC_CONTENT_TYPE_SALE_ID }}" >> .env
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ vars.NEXT_PUBLIC_SUPABASE_URL }}" >> .env

      # 3. Visualizar variáveis de ambiente para debug
      - name: Debug .env file
        run: cat .env
        
      # 4. Log in ao Azure Container Registry
      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login resourceresolve.azurecr.io -u "${{ secrets.AZURE_ACR_USERNAME }}" --password-stdin

      # 5. Build e Push da Imagem Docker
      - name: Build and Push Docker Image
        run: |
          docker build --no-cache --env-file .env -t "${DOCKER_IMAGE}:${{ github.sha }}" .
          docker push "${DOCKER_IMAGE}:${{ github.sha }}"

      # 5. Log in ao Azure CLI
      - name: Log in to Azure CLI
        run: az login --service-principal -u "${{ secrets.AZURE_CLIENT_ID }}" -p "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"

      # 6. Configurar Acesso ao Cluster AKS
      - name: Configure Access to AKS
        run: az aks get-credentials --resource-group "$AKS_RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing

      # 7. Atualizar a Imagem do Deployment no AKS
      - name: Update Deployment on AKS
        run: |
          kubectl set image deployment/$DEPLOYMENT_NAME resolve-erp-frontend="${DOCKER_IMAGE}:${{ github.sha }}" -n "$NAMESPACE"
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n "$NAMESPACE"